package {	import flash.display.Sprite;	import flash.events.Event;	import flash.events.MouseEvent;	import flash.net.URLLoader;	import flash.net.URLRequest;	import flash.system.LoaderContext;	import flash.media.Sound;	import flash.media.SoundChannel;	import flash.media.SoundTransform;	public class WildfireAudio extends Sprite {				public var configXML:XML;		public var configURL:String = "audioconfig.xml";		public var current:Number = 0;		public var sound:Sound;		public var soundchannel:SoundChannel;		public var pos:Number = 0;		public var vol:Number = 1;		public function WildfireAudio() {			init();		}		private function init():void {			pause.visible = false;			if (this.loaderInfo.parameters.configurl) {				configURL = this.loaderInfo.parameters.configurl;			}						var loader:URLLoader = new URLLoader();			loader.addEventListener(Event.COMPLETE, config_loaded);			loader.load(new URLRequest(configURL));			titletext.text = "loading...";						next.addEventListener(MouseEvent.CLICK, nextsound);			playbut.addEventListener(MouseEvent.CLICK, playsound);			pause.addEventListener(MouseEvent.CLICK, pausesound);			//setup volume slider			volume.gotoAndStop(1);			volume.mouseChildren = false;			volume.addEventListener(MouseEvent.MOUSE_OVER, function(e:Event){				volume.gotoAndStop(2);			});			volume.addEventListener(MouseEvent.MOUSE_OUT, function(e:Event){				volume.gotoAndStop(1);				volume.removeEventListener(MouseEvent.MOUSE_MOVE, voladjust);			});						volume.addEventListener(MouseEvent.MOUSE_DOWN, function(e:Event){				volume.addEventListener(MouseEvent.MOUSE_MOVE, voladjust);			});						this.addEventListener(MouseEvent.MOUSE_UP, function(e:Event){				volume.removeEventListener(MouseEvent.MOUSE_MOVE, voladjust);			});						//progress bar			progress.addEventListener(Event.ENTER_FRAME, progress_process);		}				private function config_loaded(e:Event) {			configXML = new XML(e.target.data);			sound = new Sound(new URLRequest(configXML.entry[0].url));			titletext.text = "Title: " + configXML.entry[0].title;						if(configXML.config.autoplay == "true"){				playbut.visible = false;				pause.visible = true;				soundchannel = sound.play();				soundchannel.addEventListener(Event.SOUND_COMPLETE, nextsound);			}else{				playbut.visible = true;				pause.visible = false;			}		}		private function nextsound(e:Event) {			if (current < configXML.entry.length() - 1) current++;			else current = 0;			if (soundchannel) soundchannel.stop();			sound = new Sound(new URLRequest(configXML.entry[current].url));			titletext.text = "Title: " + configXML.entry[current].title;			soundchannel = sound.play();			var st:SoundTransform = new SoundTransform(vol,0);			soundchannel.soundTransform = st;			soundchannel.addEventListener(Event.SOUND_COMPLETE, nextsound);		}				private function pausesound(e:Event) {			pause.visible = false;			playbut.visible = true;			pos = soundchannel.position;			soundchannel.stop();		}		private function playsound(e:Event) {			pause.visible = true;			playbut.visible = false;			soundchannel = sound.play(pos);			var st:SoundTransform = new SoundTransform(vol,0);			soundchannel.soundTransform = st;			soundchannel.addEventListener(Event.SOUND_COMPLETE, nextsound);		}		private function voladjust(e:Event) {			var targetposition:Number = volume.mouseX - volume.volmask.width;			if (targetposition < volume.volfill.x - volume.volmask.width) targetposition = volume.volfill.x - volume.volmask.width;			if (targetposition > volume.volfill.x) targetposition = volume.volfill.x;			volume.volmask.x = targetposition;			//trace(position - minposition / range);			vol = (volume.volmask.x - (volume.volfill.x - volume.volmask.width)) / volume.volmask.width;						var st:SoundTransform = new SoundTransform(vol,0);			soundchannel.soundTransform = st;		}		private function progress_process(e:Event) {			var loadRatio:Number = sound.bytesLoaded / sound.bytesTotal;			var estimatedLength:Number = sound.length / loadRatio;			var playbackRatio:Number = soundchannel.position / estimatedLength;			if(playbackRatio < 0 || isNaN(playbackRatio)) playbackRatio = 0;			if(playbackRatio > 1) playbackRatio = 1;			trace(playbackRatio);			progress.scaleX = playbackRatio;		}	}}